import { DateRangeOptions, Inclusivity, IsBetweenDuration, IsSameOrAfterDuration, IsSameOrBeforeDuration, ResetToDuration } from 'src/@types';
import { addDays, addHours, addYears, differenceInDays, differenceInHours, differenceInSeconds, differenceInYears, endOfMonth, format as formatLocal, isAfter, isBefore, isEqual, isSameDay, isValid, parse, startOfMonth } from 'date-fns';
import moment from 'moment';
export type DateUtilsFormat = 'date' | 'timestamp' | 'timestamp12' | 'timestamp0';
export type timestamp = `${number}${number}${number}${number}-${number}${number}-${number}${number} ${number}${number}:${number}${number}:${number}${number}`;
export declare class DateUtils {
    static addHours: typeof addHours;
    static addDaysLocal: typeof addDays;
    static addYears: typeof addYears;
    static differenceInHours: typeof differenceInHours;
    static differenceInDays: typeof differenceInDays;
    static differenceInSeconds: typeof differenceInSeconds;
    static differenceInYears: typeof differenceInYears;
    static endOfMonth: typeof endOfMonth;
    static formatLocal: typeof formatLocal;
    static isAfter: typeof isAfter;
    static isBefore: typeof isBefore;
    static isEqual: typeof isEqual;
    static isSameDay: typeof isSameDay;
    static isValid: typeof isValid;
    static parse: typeof parse;
    static startOfMonth: typeof startOfMonth;
    static addDays(date: Date, days?: number): Date;
    static addMinutes(date: Date, minutes?: number): Date;
    static addMonths(date: Date, months?: number): Date;
    static daysAfter(days?: number): Date;
    static daysAgo(days?: number): Date;
    static dateValidator: (date: any, spaceSubtypeHour?: number) => moment.Moment;
    static format(date: Date, format: string, locale?: any): string;
    static getDateRange(fromP: Date, toP: Date, options?: DateRangeOptions): Date[];
    static getLocalTime(value: Date): string;
    static getMaximumDate(): Date;
    static getWeekDay(date: Date): "Mo" | "Tu" | "We" | "Th" | "Fr" | "Sa" | "Su";
    static keyable(date: Date, hours?: boolean): string;
    static isBetween(date: Date, dateLeft: Date, dateRight: Date, duration?: IsBetweenDuration, inclusivity?: Inclusivity): boolean;
    static isSameOrAfter(dateLeft: Date, dateRight: Date, duration?: IsSameOrAfterDuration): boolean;
    static isSameOrBefore(dateLeft: Date, dateRight: Date, duration?: IsSameOrBeforeDuration): boolean;
    static nowUtc(): Date;
    static todayHourUtc(hour?: number): Date;
    static resetTo(date: Date, duration?: ResetToDuration): Date;
    static resetToUTC(date: Date, format?: string): Date;
    static timestampToUtc(string: timestamp | string): Date;
    static today(): Date;
    static tomorrow(): Date;
    static utcToTimestamp(value: Date): string;
    static validateFromAndTo(from: Date, to: Date, rearrange?: boolean): {
        from: Date;
        to: Date;
    };
    static yesterday(): Date;
}
